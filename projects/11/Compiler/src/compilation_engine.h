#ifndef COMPILATION_ENGINE_H_
#define COMPILATION_ENGINE_H_

#include <fstream>
#include <set>

#include "tokenizer.h"
#include "symbol_table.h"

typedef set<char> OperatorSet;

// Effects actual Jack compilation.  Gets input from the Tokenizer and emits its parsed structure
// into an output file.  The output is generated by a series of CompileXxx() routines, one for every
// syntatic element, Xxx, of the Jack grammar.  The contract between these routines is that each
// CompileXxx() rountine should read the syntactic construct Xxx from the input, advance the
// Tokenizer exactly beyond Xxx, and output the parsing of Xxx.

class CompilationEngine
{
    // Used to write out the parsed structure to a XML file.
    class XmlWriter
    {
        ofstream &out_;
        int indentation_;

        void Indent();

        public:
            XmlWriter(ofstream &out) : out_(out), indentation_(0)
            {

            }

            void OpenElement(const char *element_name);
            void CloseElement(const char *element_name);
            void WriteIdentifierElement(const string &name, const string &kind);
            void WriteIdentifierElement(const string &name, const string &kind, const string &action, int index);
            void WriteTokenElement(const Tokenizer &tokenizer);
    };

    bool ChompToken()
    {
        return (tokenizer_.HasMoreTokens() && tokenizer_.Advance());
    }

    Tokenizer tokenizer_;
    SymbolTable symbol_table_;
    XmlWriter xmlwriter_;
    OperatorSet opset_;

    // All CompileXxx rountines return false if the grammar is not properly matched.
    bool CompileClass();
    bool CompileClassVarDec();
    bool CompileSubroutine();
    bool CompileSubroutineBody();
    bool CompileParameterList();
    bool CompileVarDec();
    bool CompileStatements();
    bool CompileDo();
    bool CompileLet();
    bool CompileWhile();
    bool CompileReturn();
    bool CompileIf();
    bool CompileExpression();
    bool CompileTerm();
    bool CompileExpressionList();
    bool CompileArrayIndex(const string &identifier);
    bool CompileSubroutineCall(const string &identifier);

public:
    // Creates a tokenizer with a input stream ready for reading and an output stream for
    // writing.
    CompilationEngine(ifstream &in, ofstream &out);

    bool Compile();
};

#endif
