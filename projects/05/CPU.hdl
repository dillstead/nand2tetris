// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode the instruction
    // If A instruction, set all C instruction bits to 0 and
    // vice versa.
    Mux16 (a=instruction, b=false, sel=instruction[15], out[0..14]=v);
    Mux16 (a=false, b=instruction, sel=instruction[15], out[0]=j3, out[1]=j2,
      out[2]=j1, out[3]=d3, out[4]=d2, out[5]=d1, out[6]=c6, out[7]=c5,
      out[8]=c4, out[9]=c3, out[10]=c2, out[11]=c1, out[12]=a);

    // A register
    // Input
    //   if A instruction, the instruction value
    //   else the ALU output
    // Output
    //   address in data memory of M output
    //   PC
    //   possibly the ALU
    // Load
    //   if A instruction or if C instruction and d1 is set
    Mux16 (a[0..14]=v, a[15]=false, b=outALUinA, sel=instruction[15], out=inA);
    Not (in=instruction[15], out=isA);
    Or (a=isA, b=d1, out=loadA);
    ARegister (in=inA, load=loadA, out=outAinALU, out=outAinPC, out[0..14]=addressM);

    // D register
    // Input
    //   ALU output
    // Output
    //   ALU
    // Load
    //   if C instruction and d2 is set
    DRegister (in=outALUinD, load=d2, out=inX);

    // ALU
    // Input
    //   x
    //     D register
    //   y
    //     if C instruction and a bit is set, A register output
    //     else M input value
    //   zx, nx, zy, ny, f, no
    //     if C instruction, c field
    // Output
    //   D register
    //   M value output
    //   possibly the A register
    Mux16 (a=outAinALU, b=inM, sel=a, out=inY);
    // The ALU takes its x from the D register and the y input from the A register or M input.
    ALU (x=inX, y=inY,  zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=outALUinA, out=outALUinD,
      zr=isZero, ng=isNeg);

    // PC register
    // Input
    //  A register
    // Output
    //  pc
    // Reset
    //  reset
    // Load
    //  if ng and j1 or
    //  if zr and j2 or
    //  if !zr and !ng and j3
    // Inc
    //  if not load
    And (a=j1, b=isNeg, out=less);
    And (a=j2, b=isZero, out=zero);
    Or (a=less, b=zero, out=lessOrZero);
    Not (in=isNeg, out=notLess);
    Not (in=isZero, out=notZero);
    And (a=notLess, b=notZero, out=notLessAndZero);
    And (a=j3, b=notLessAndZero, out=greater);        
    Or (a=lessOrZero, b=greater, out=loadPC);
    Not (in=loadPC, out=incPC);
    PC (in=outAinPC, reset=reset, inc=incPC, load=loadPC, out[0..14]=pc);

    // Write to memory if C instruction and d3 is set.
    And (a=instruction[15], b=d3, out=writeM);
}
